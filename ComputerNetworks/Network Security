
https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-858-computer-systems-security-fall-2014/video-lectures/lecture-12-network-security/

Threat Model:
- Intercept the packets & Model 
- Inject Packets
- Attacker has computer
- 

TCP Connection:

Client:  C -> S  SYN(SNc)
Server:  S -> C  SYN(SNs) + ACK(SNc+1)
Client:  C -> S  ACK(SNs+1)

TCP Data Transfer:
Client:  C -> S  DATA(SNc+1)

Attacker might guess Sequence Number.

Attacker:  C -> S  SYN(SNc)
Server:  S -> C  SYN(SNs) + ACK(SNc+1) : If the client gets an unknown packet, then client has to RESET the packet. 
                  C -> S RST(SNc)           
Attacker:  C -> S  ACK(SNs+1) ==> Attacker might guess servers sequence#.
Attacker:  C -> S  DATA(SNc+1)


Spoof TCP packets coming from arbitary IP address, because of
- IP based Authorization:
  Protocos used IP based Authentication: rlogin, SMTP
- RST packets
- Data Injections

TCP Sequence Number Implemetation:

ISN == Random Initial Sequence Number.

ISNc ->  ISN(old style) + Cryptography_HashFunction(src IP, src port , dest IP, dest Port, Key )

SNs -> F( src IP, src port , dest IP, dest Port, Timestamp, Key ) || Timestamp.

DNS uses UDP protocol, and there is no 3way handshake connection establishment, to secure sequence numbers, UDP chooses random 
port numbers ( 16 bit ) at the client end.
- And the best way is to use DNSec protocol.

Kerberos: Crytographucally secure protocol, authenticating computers & applications over the network.
- authentication protocol which allows only legitimate users to access the intended services over the internet.
Earier to kerberos, rlogin commands were used which a bad plan, because they use IP address for authentication 

Kerberos server also called as KDC ( Key Distribution Center ).
- KDC shares a keys between users & kerberos server or Services & kerberos
- KDC maps users with the keys & we get users from Groups/Access Control Lists 
- KDC server should be online ALLTIME
- Kerberos uses symmetric encryption/decryption mechanism
     Ekey(PlainText) = CipherText
     Dkey(CipherText) = PlainText
- Kerberos authentication is not used by the web.
- Just like KDC mapping table, Certifcate Authority (CA) in WEB maintians mapping between Principal & public Keys. 
  In web world Browser Validates SSL Certifcate with CA uses Asymmetric Keys ( public/private keys ) for authenticating user
  & then all traffic between 2 parties are encrypted/decrypted using a shared / symmetric key Algorithm.

   Epublickey(PlainText) = CipherText
   Dsecretkey(CipherText) = Plaintext
   
   Signsecretkey(message) = s    , Verifypublickey(m,s) = ok?

Web Security 
- Data over Network - Protected by SSL/TLS ( using signed certificates )
- Code/Data in Browser ( java script files, cookies...etc ) - Protected by new URL scheme - https://
  Hostname in the URL has to be the name in Certifcate 
  Cookies - if it has secure flag then it get send to only https request, if not then it applies to both http & https requests.
- User Interface ( UI ) - Lock Icon followed by URL

  USER1             USER2
       \           / 
   HOST1\         /HOST2
         \_______/
         |  NTW  |
         /---|---\
        /    |    \
File Server  |    Printer
         Mail Server
         
         
         
                                                  KDC
                                          |______________________                       
                               KERBEROS __|        Name | Key    |
                                          |             | Kc     |
                                  TGS   __|             | Ks     |
                                          |______________________|
                                          


SERVICES 


