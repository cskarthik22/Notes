- TCP is the protocol used at Transport Layer and is responsible for END - END delivery
- TCP is a connection oriented protocol : When ever two parties communicate with messages, some resources (buffer, bandwidth,   cpu ) are reserved at both ends. 
  Buffer allocated for the communication are identified using [ IP + PORT# ] => SOCKET
- TCP is Byte stream protocol. Every Byte is identified by assigning a sequence number to it.

**Note: HDLC protocol is used at DLL and here every bit is counted.

                        TCP Header Format

 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Source Port          |       Destination Port        |  ROW 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Sequence Number                        |  ROW 2
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Acknowledgment Number                      |  ROW 3
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Data |           |U|A|P|R|S|F|                               |
   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |  ROW 4
   |       |           |G|K|H|T|N|N|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Checksum            |         Urgent Pointer        |  ROW 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |  ROW 6
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             data                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   
################################### ROW1 ###################################################################
source & destination ports are 16 bit each. so maximum ports possible are power(2,16)-1 i.e (0 - 65535)
These Port numbers help in Multiplexing and De-Multiplexing
HTTP - 80
FTP -  21
Telnet - 23
SNMP - 25
(0 - 1023) - All wellknown services run at port numbers. IANA is repsonsible for all these numbers
(1024 - 49151) - Reserved
(49152 - 65535) used by general public. By default OS gives some source port number when you connect to google.

Type nestat to check all source and destination ports present in the computer

################################### ROW2 ###################################################################
Sequence Number - 32 bit : This field holds the sequence number of first byte present in the segment.
TCP is a byte stream protocol, which means what ever byte that comes from Application layer to Transport Layer that is counted by assigning it with sequence number.

example:  
       sender (IPs:PortX)                receiver (IPr:Port80)                                 
              |<============================>| TCP CONNECTION ESTABLISHED
              |                              |
              |       (0-99) seq = 0         |
              |----------------------------->| SUCCESS
              |                              | 
              |      (199-100) seq = 100     |                     **** DONT ALWAYS START SEQUENCE NUMBER WITH FIXED NUMBER 
              |----------------------------->| PACKET LOST              ALWAYS START WITH RANDOM NUMBER, because the packet
              |                              |                          with seq=100 due to some reason got delayed and may
              |       (299-200) seq = 200    |                          suddenly appear when a new connection is established
              |----------------------------->| SUCCESS                  incase source operating system uses the same port x
              |                              |                          which is used in earlier connection.
              |                              |                          E.g: Fixed like 0, both first and second connection
              |*****************************>| CONNECTION LOST          seq#'s are started with 0 & the delayed packet inprevious 
             (IPs:PortX)                    (IPr:Port80)                connection suddenly appreared in new connection.
              |<============================>| NEW TCP CONNECTION ESTABLISHED
              |                              |
              |       (0-99) seq = 0         |
              |----------------------------->| SUCCESS - lost packet from previous connection
              |----------------------------->| SUCCESS - packet from New connection


################################### ROW3 ###################################################################
Acknowledgement Number: This fields holds the last byte sequence number + 1

How to calculate last byte sequence number ? or How will the receiver calclate Acknowledgement Number?

Every TCP Header travels in a IP datagram, where IP datagram has Header Len, Total Length
IP DataGram TotalLength - IP Datagram Header Length = TCP Segment Length
TCP Segment Length - TCP Header Length = TCP Data Length.

IP DataGram TotalLength = 1000
IP HeaderLength = 5
TCP Segment HeaderLength = 5
TCP squence# = 100
TCP ACK# = ?
 Solution: When ever header length is less than 20 ( min length ), then multiply by 4.
 DataGram = [ TCP SEGMENT[960+5*4] + 5*4 ]
 TCP ACK# = 100 + 960 - 1 = 1059
 
 ################################### ROW4 ###################################################################
 
 TCP is a connection oriented protocol & Full duplex connection
  a) Connection Establishment
  b) Data Transfer
  c) Connection Termination
  
**NOTE: We dont have MSS- Maximum segment size field, it is kept under options
Transport Layer wisely choses MSS, to avoid fragmentation at Network Layer

Example: Sender Host is present in a LAN, and the Ethernet Frame size in fixed to 1500 bytes, which means DataLink layer can 
transfer not more than 1500 bytes.

TL  = 1460(Data) + 20(Header)
NL  = 1480(Data) + 20(Header)
DLL = Header + 1500 Bytes + Trailer

Window Size: Indicates the capacity of the Host as a receiver

a) Connection Establishment (3-WAY Handshake ) :
   - REQUEST PACKET: Client tells server in its request packet header, that its Random Initial Sequence# is 521, window size        
     is 14600 ( means it has allocated buffer size of 14600 bytes for receiving data from the server ) & Maximum Segment            
     Size is 1460 ( sets in options field), hence i can hold 14600/1460 = 10 segments in one GO / Window.  
   - REPLY PACKET: Server Sends a Reply packet with ACK=1,RISEQ#=2000 and its WindowSize=10000Bytes,MSS=500 and it is              
     expecting next packet with sequence number 522 ( previous seq# + 1 ).
   - ACKNOWLEDGEMENT PACKET: Client sends a packet with SEQ#=522,ACK=1 and tells server that the next packet it is expeting is      
     of seq# 2001 in ACK# field.
   After exchanging these 3 packets, TCP connection gets established.
   

 sender (IPs:PortX)                receiver (IPr:Port80)                                 
              |                              | 
              |                              |
              | RIseq=521,SYN = 1,MSS=1460   |
REQUEST PACKET|----------------------------->|            Which means client tells sever that it has window size ( receiving                 |     Window Size = 14600      |            buffer ) of 14600, and hence it can hold 10 Segments each of size                 |                              |            1460 in one go/window.
              |RIseq=2000,SYN=1,MSS=500,ACK=1|
              |<-----------------------------| REPLY PACKET                                            
              | ACK#=522,Window Size=10000   |
              |                              | 
              | Seq=522,ACK#=2001,ACK=1      |
ACK PACKET    |----------------------------->|        
              | TCP CONNECTION ESTABLISHED   |
              

              

SYN =1 packet will take one sequence Number
ACK =1 pure ack packet will take zero sequence number
FIN =1 packet will take one sequence Number
Data packet will take one sequence Number


                            
                   TCP Connection State Diagram

                             +---------+ ---------\      active OPEN  
                              |  CLOSED |            \    -----------  
                              +---------+<---------\   \   create TCB  
                                |     ^              \   \  snd SYN    
                   passive OPEN |     |   CLOSE        \   \           
                   ------------ |     | ----------       \   \         
                    create TCB  |     | delete TCB         \   \       
                                V     |                      \   \     
                              +---------+            CLOSE    |    \   
                              |  LISTEN |          ---------- |     |  
                              +---------+          delete TCB |     |  
                   rcv SYN      |     |     SEND              |     |  
                  -----------   |     |    -------            |     V  
 +---------+      snd SYN,ACK  /       \   snd SYN          +---------+
 |         |<-----------------           ------------------>|         |
 |   SYN   |                    rcv SYN                     |   SYN   |
 |   RCVD  |<-----------------------------------------------|   SENT  |
 |         |                    snd ACK                     |         |
 |         |------------------           -------------------|         |
 +---------+   rcv ACK of SYN  \       /  rcv SYN,ACK       +---------+
   |           --------------   |     |   -----------                  
   |                  x         |     |     snd ACK                    
   |                            V     V                                
   |  CLOSE                   +---------+                              
   | -------                  |  ESTAB  |                              
   | snd FIN                  +---------+                              
   |                   CLOSE    |     |    rcv FIN                     
   V                  -------   |     |    -------                     
 +---------+          snd FIN  /       \   snd ACK          +---------+
 |  FIN    |<-----------------           ------------------>|  CLOSE  |
 | WAIT-1  |------------------                              |   WAIT  |
 +---------+          rcv FIN  \                            +---------+
   | rcv ACK of FIN   -------   |                            CLOSE  |  
   | --------------   snd ACK   |                           ------- |  
   V        x                   V                           snd FIN V  
 +---------+                  +---------+                   +---------+
 |FINWAIT-2|                  | CLOSING |                   | LAST-ACK|
 +---------+                  +---------+                   +---------+
   |                rcv ACK of FIN |                 rcv ACK of FIN |  
   |  rcv FIN       -------------- |    Timeout=2MSL -------------- |  
   |  -------              x       V    ------------        x       V  
    \ snd ACK                 +---------+delete TCB         +---------+
     ------------------------>|TIME WAIT|------------------>| CLOSED  |
                              +---------+                   +---------+
