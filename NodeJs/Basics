npm is a packet manager comes with the Node installation.

Facebook released its own package manager Yarn which is much faster then npm.

you can get the github repos using npm

npm i expressjs/express  (gets the latest release code with last commit)
npm i expressjs/express#4.14.0  ( gets specific version )
npm ls express
npm i express --dry-run ( this dry-run command wont install, instead it will list 
what will be installed)


Event Loop Model:

EventLoop Processes its quequed events only when the CALL STACK is empty

NodeJS is a runtime javascript engines, executes the code outside of browser. It has 2 major dependent modules V8 & Libuv
Node Js SDK : This is a wrapper on top of V8 & libuv, it has lot of standard modules which interacts with Core C++ libraries 
using process.binding().
V8 - 70% in JS & 30% in C++. : V8 Engine acts as a mediator, which takes sure, Javascript method calls are converted to 
C++ functions
Libuv - 100% C++ : Core logic is written in C++. It maintains threadpool.
EventLoop is like a control structure which decides what one thread should do at a one given point of time.
Every Node program has exactly one eventloop.


npm init
// Express has a lot of helper modules, which makes easy to deal with http requests.
npm install --save express
// webpack is used to bundle all js modules to a single file commonly called as bundle.js
npm install --save-dev webpack
// babel is a javascript compiler, which translates code to EC2015 browser compatable versions
npm install --save-dev @babel/core babel-loader@7 babel-preset-latest
npm install --save-dev style-loader css-loader
npm install --save-dev extract-text-webpack-plugin
npm install --save-dev image-webpack-loader url-loader file-loader

Life cycle of Node : (example => node index.js)

1. Node takes the contents of the file & executes all the code.
2. Node immediately enters into a eventloop. 
3. Behind the scenes eventloop behaves like a while loop & it executes body in one single tick.
3. Eventloop has to meet some criteria's inorder to continue the loop
   - If there are any functions with setTimeout, SetInterval,  still running.
      - Once done it calls the relevent callbacks.
   - If there are any pendingOperatingSystem tasks. ( eg: server listening to a given port )
      - Once done, node executes relevent callbacks.
   - if there are any long running operations . ( eg: dealing with fs module, read file from harddrive.. )
      - Node pauses execution for sometime & continues when its done.
   - if ther are any functions with pending timers - SetImmediate
 
 const pendingTimers = [];
 const pendingOSTasks = [];
 const pendingOperations = [];
 
 // Node first excutes all the file content.
 myfile.runContents();
 
 Node Event loop is actually a combination of different phases listed below
 function shouldContinue() {
 ##: this will decide whether eventloop execute for another tick.
   // PHASE#1: Any Pending Timers (setTimeout, SetInterval)
   // #2: Any Pending OS Tasks
   // #3: Any Pending Operations
          return pendingTimers.length || pendingOSTasks.length || pendingOperations.length;
   // #4: Any Pending Timers (SetImmediate)
   // #5: Handle any close events ( eg: read streams )
   
  }
   
   while( shouldContinue()) 
   {
   // Event loop body - executes in one ticke
   
   }
   
setTimeout is simply like calling the function after delay has finished. essentially means execute after all current functions
in the present queue get executed. No guarantees can be made about how long it could take.

setImmediate is similar in this regard except that it doesn't use queue of functions. It checks queue of I/O eventhandlers.

http://voidcanvas.com/setimmediate-vs-nexttick-vs-settimeout/

setImmediate callbacks are called after I/O Queue callbacks are finished or timed out. setImmediate callbacks are placed 
in Check Queue, which are processed after I/O Queue.

setTimeout(fn, 0) callbacks are placed in Timer Queue and will be called after I/O callbacks as well as Check Queue callbacks. 
As event loop, process the timer queue first in each iteration, so which one will be executed first depends on which phase event loop is.
==========================================================================

Node Event Loop is single threaded
Some of the node framework / Std Library function calls are not single threaded.
 - Java script function calls that deligate work to C++ function are not single thread. because libuv maintians threadpool
   with a default size of 4.
 


