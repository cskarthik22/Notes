---
- hosts: local
  become: false
  user: myname
  gather_facts: no
  connection: ssh
  vars:
   APICERT_HOST: '192.168.0.1,192.168.0.10,HOST1,192.168.0.11,HOST2,192.168.0.12,LOADBALANCERHOST,127.0.0.1,localhost,kubernetes.default'
   KUBERNETES_ADDRESS: 192.168.0.12
   WORKERNODES:
    WORKER0:
     HOST: HOST1
     IP: 192.168.0.10
    WORKER1:
     HOST: HOST2
     IP: 192.168.0.11
  tasks:
    - ping:
    - name: Install cfssl
      become: true
      get_url:
        url: '{{ item.url }}'
        dest: '{{ item.dest }}'
        mode: '{{ item.mode }}'
      with_items:
        - { url: 'https://pkg.cfssl.org/R1.2/cfssl_linux-amd64', dest: /usr/local/bin/cfssl, mode: 755 }
        - { url: 'https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64', dest: /usr/local/bin/cfssljson, mode: 755 }
      tags: cfssl
      delegate_to: 10.27.40.18
    - name: Create ca-config.json file
      shell: |
            cat << EOF > ~/ansible_workspace/ca-config.json
            {
              "signing": {
                "default": {
                   "expiry": "9000h"
                 },
                 "profiles": {
                    "kubernetes": {
                       "usages": ["signing", "key encipherment", "server auth", "client auth"],
                       "expiry": "9000h"
                     }
                  }
               }
             }
    - name: Create ca-csr.json file
      shell: |
            cat << EOF > ~/ansible_workspace/ca-csr.json
            {
              "CN": "kubernetes",
              "key": {
                 "algo": "rsa",
                 "size": 2048
              },
              "names": [
                {
                  "C": "US",
                  "L": "NY",
                  "O": "kubernetes",
                  "OU": "DEV",
                   "ST": "NY"
               }
              ]
             }
    - name: Create certificate authority
      shell: |
           cfssl gencert -initca ~/ansible_workspace/ca-csr.json | cfssljson -bare ~/ansible_workspace/ca
      tags: ca
    - name: Create '{{ item.value.HOST }}'-csr.json file
      shell: |
            cat << EOF > ~/ansible_workspace/{{ item.value.HOST }}-csr.json
            {
              "CN": "'{{ item.value.HOST }}'",
              "key": {
                 "algo": "rsa",
                 "size": 2048
              },
              "names": [
                {
                  "C": "US",
                  "L": "NY",
                  "O": "kubernetes",
                  "OU": "DEV",
                  "ST": "NY"
               }
              ]
             }
      loop: "{{ lookup('dict', WORKERNODES) }}"
      tags: workernodes
    - name: Create {{ item.value.HOST }} ca
      shell: |
            cd ~/ansible_workspace
            cfssl gencert \
             -ca=ca.pem \
             -ca-key=ca-key.pem \
             -config=ca-config.json \
             -hostname={{ item.value.IP }},{{ item.value.HOST }}  \
             -profile=kubernetes \
             {{ item.value.HOST }}-csr.json | cfssljson -bare {{ item.value.HOST }}
      loop: "{{ lookup('dict', WORKERNODES) }}"
      tags: worker0
    - name: debug test
      debug:
        msg: "User {{ item.key }} is {{ item.value.HOST }} ({{ item.value.IP }})"
      loop: "{{ lookup('dict', WORKERNODES) }}"
      tags: test
    - name: Create {{ item }}-csr.json file
      shell: |
            cat << EOF > ~/ansible_workspace/{{ item }}-csr.json
            {
              "CN": "{{ item }}",
              "key": {
                 "algo": "rsa",
                 "size": 2048
              },
              "names": [
                {
                  "C": "US",
                  "L": "NY",
                  "O": "kubernetes",
                  "OU": "DEV",
                  "ST": "NY"
               }
              ]
             }
      with_items:
        - admin
        - kube-controller-manager
        - kube-proxy
        - kube-scheduler
        - service-account
      tags: csr
    - name: Create {{ item }} ca
      shell: |
            cd ~/ansible_workspace
            cfssl gencert \
             -ca=ca.pem \
             -ca-key=ca-key.pem \
             -config=ca-config.json \
             -profile=kubernetes \
             {{ item }}-csr.json | cfssljson -bare {{ item }}
      with_items:
        - admin
        - kube-controller-manager
        - kube-proxy
        - kube-scheduler
        - service-account
      tags: certs
    - name: Generate Config files
      shell: |
            mkdir -p ~/ansible_workspace
            cd ~/ansible_workspace
            kubectl config set-cluster mykubernetes \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server=https://{{ KUBERNETES_ADDRESS }}:6443 \
              --kubeconfig={{ item }}.kubeconfig
            kubectl config set-credentials {{ item }} \
              --client-certificate={{ item }}.pem \
              --embed-certs=true \
              --kubeconfig={{ item }}.kubeconfig
            kubectl config set-context default \
              --cluster=mykubernetes \
              --user=kubernetes-admin \
              --kubeconfig={{ item }}.kubeconfig
      with_items:
       - HOST1
       - HOST2
       - kube-proxy
       - kube-controller-manager
       - kube-scheduler
       - admin
      delegate_to: 127.0.0.1
      tags: configfiles

    - name: debug values
      debug: msg={{ APICERT_HOST }}
      tags: debugtest
