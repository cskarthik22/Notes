---
- hosts: local
  become: false
  user: myname
  gather_facts: no
  connection: ssh
  vars:
   WORKER0_HOST: Host1
   WORKER0_IP: 192.168.0.10
   WORKER1_HOST: Host2
   WORKER1_IP: 192.168.0.11
  tasks:
    - ping:
    - name: Install cfssl
      become: true
      shell: |
            curl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -o /usr/local/bin/cfssl
            curl https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -o /usr/local/bin/cfssljson
            chmod +x /usr/local/bin/cfssl /usr/local/bin/cfssljson
      tags: cfssl
    - name: Create ca-config.json file
      shell: |
            cat << EOF > ~/ansible_workspace/ca-config.json
            {
              "signing": {
                "default": {
                   "expiry": "9000h"
                 },
                 "profiles": {
                    "kubernetes": {
                       "usages": ["signing", "key encipherment", "server auth", "client auth"],
                       "expiry": "9000h"
                     }
                  }
               }
             }
    - name: Create ca-csr.json file
      shell: |
            cat << EOF > ~/ansible_workspace/ca-csr.json
            {
              "CN": "kubernetes",
              "key": {
                 "algo": "rsa",
                 "size": 2048
              },
              "names": [
                {
                  "C": "US",
                  "L": "NY",
                  "O": "kubernetes",
                  "OU": "DEV",
                   "ST": "NY"
               }
              ]
             }
    - name: Create certificate authority
      shell: |
           cfssl gencert -initca ~/ansible_workspace/ca-csr.json | cfssljson -bare ~/ansible_workspace/ca
      tags: ca
    - name: Create '{{ item.value.HOST }}'-csr.json file
      shell: |
            cat << EOF > ~/ansible_workspace/{{ item.value.HOST }}-csr.json
            {
              "CN": "'{{ item.value.HOST }}'",
              "key": {
                 "algo": "rsa",
                 "size": 2048
              },
              "names": [
                {
                  "C": "US",
                  "L": "NY",
                  "O": "kubernetes",
                  "OU": "DEV",
                  "ST": "NY"
               }
              ]
             }
      loop: "{{ lookup('dict', WORKERNODES) }}"
      tags: workernodes
    - name: Create {{ item.value.HOST }} ca
      shell: |
            cd ~/ansible_workspace
            cfssl gencert \
             -ca=ca.pem \
             -ca-key=ca-key.pem \
             -config=ca-config.json \
             -hostname={{ item.value.IP }},{{ item.value.HOST }}  \
             -profile=kubernetes \
             {{ item.value.HOST }}-csr.json | cfssljson -bare {{ item.value.HOST }}
      loop: "{{ lookup('dict', WORKERNODES) }}"
      tags: worker0
    - name: debug test
      debug:
        msg: "User {{ item.key }} is {{ item.value.HOST }} ({{ item.value.IP }})"
      loop: "{{ lookup('dict', WORKERNODES) }}"
      tags: test
    - name: Create {{ item }}-csr.json file
      shell: |
            cat << EOF > ~/ansible_workspace/{{ item }}-csr.json
            {
              "CN": "{{ item }}",
              "key": {
                 "algo": "rsa",
                 "size": 2048
              },
              "names": [
                {
                  "C": "US",
                  "L": "NY",
                  "O": "kubernetes",
                  "OU": "DEV",
                  "ST": "NY"
               }
              ]
             }
      with_items:
        - admin
        - kube-controller-manager
        - kube-proxy
        - kube-scheduler
        - service-account
      tags: csr
    - name: Create {{ item }} ca
      shell: |
            cd ~/ansible_workspace
            cfssl gencert \
             -ca=ca.pem \
             -ca-key=ca-key.pem \
             -config=ca-config.json \
             -profile=kubernetes \
             {{ item }}-csr.json | cfssljson -bare {{ item }}
      with_items:
        - admin
        - kube-controller-manager
        - kube-proxy
        - kube-scheduler
        - service-account
      tags: certs
