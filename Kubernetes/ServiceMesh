- Large application is broken down to multiple micro-services & they all talk to each other in the form of Mesh called as 
  Service Mesh.
- In the above scenario we have couple of challenges. Between the microservices we have
  a) No Enryption by default
  b) No retries, No failover's
  c) No intellegent Loadbalancing, the Ingress controller will just do round-robin
  d) No Routing decisions made btw the applications.. it can be applied only at Ingress controller
  e) No Metrics/logs/traces
  f) No access control
  
 *** Implementing all these for an application is an extra effort, so one solution to this is to add a proxy to each pod 
 which does all these operations, this is called side car deployment.
 ISTIO is the great solution for this.
 
 kubectl apply -f <(istioctl kube-inject -f web-deployment.yml)
 

Kubernetes Service VS Istio Virtual Service ??

kubernetes Service's discovers IP address of the individual pods ( Service discovery using embedded Core DNS ) 
Where as Istio Virtual service's are managed by pilot and allow us to override Envoy proxy configurations to acheive things
such as intellegent traffic management. 

Why Ingress Component in Kubernetes ?

If you want to expose the kubernetes service to outside world ( i.e out side kubernetes cluster ) we go with ingress component,
which helps setting up with minimal cloud loadbalancers ( AWS/GCP/F5 ...etc ).
With out Ingress if we expose service with Type set as Load balancer then each service will endup with one load balancer (
one-one mapping btw service and lb ), which results in huge cost.

Why Ingress Gateway in Istio ??
It's replacement to k8s Ingress component, if we go with Istio
