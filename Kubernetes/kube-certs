https://www.youtube.com/watch?v=CnHTCTP8d48&index=2&list=LLqnqwu41LW_VGmsQkCksPyA&t=1280s

## User Creates a Private key
openssl genrsa -out kar.key 2048

## User generates a certificate signing request ( CSR file ) & sends to Administrator
openssl req -new -key kar.key -out kar.csr -subj="/CN=kar/O=devs"

## Administrator generates a user/client certificate
openssl x509 -req -in kar.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key 
-CAcreateserial -out kar.crt -days 500

kubectl config set-credentials kar --client-certificate=kar.crt --client-key=kar.key --embed-certs=true
kubectl config set-context kar@kubernetes --cluster=kubernetes --user=kar

kubectl config get-contexts
openssl x509 -in kar.crt -text -noout

kubectl config use-context kar@kubernetes
kubectl config use-context kubernetes-admin@kubernetes

For ROLE BASED ACCESS CONTROL ( RBAC )
- Firstly we have to create 
  a) Roles : Tells which operations can be performed on which resources
  
 kind: Role
 apiVersion: rbac.authorization.k8s.io/v1beta1
 metadata:
    namespace: test
    name: pod-access
 rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]

**Note: for admin we keep star * under groups/resources/verbs (["*"]). To create Cluster Role just remove namespace & make 
kind as ClusterRole
    
  b) RoleBindings : Binds users/groups to the roles defined in previous step
  
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: devs-read-pods
  namespace: test
subjects:
- kind: Group
  name: devs # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-access
  apiGroup: rbac.authorization.k8s.io
  
  
