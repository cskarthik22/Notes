Inorder to design any electronic digital circuit, first we will form an switching expression, then we will minimize it and 
finally we do realization (i.e implement using AND & OR Gates... ).

Switching Exression: It is fininite number of combinations of switching variables and constants { 0,1 } by means of switching
operations { +,'.',NOT }
             
Example: x+x'yz+xz'
Every occurence of a variable in its true or complement form is called a LITERAL, the above example has 6 literals.

Properties of Simplifying SE
===================================
a) Absorption Law: x + xy  => x ( 1 + y ) = x
b) Dual: x + x'y => (x + x')(x + y) => 1.(x + y) => (x+y)
      x(x'+y) => xx' + xy => 0 + xy => xy
c) Demorgan's Law: It says if there is any switching expression like
    f = ( a,b,c,d,.,+,0,1 ) then
    _
    f = ( a',b',c',d',+,.,1,0)
d) Consensus Theorem: xy + x'z + yz = xy + x'z
    Proof: 
    xy+x'z+yz => xy+x'z+yz(1) => xy + x'z+yz(x+x') => xy + x'z + yzx + yzx' => xy +yzx + x'z + yzx' =>
                 xy(1+x) + x'z(1+y) ==> xy + x'z

**Note: f + f' = 1
    _______
   ( x + y ) = x' y' 
    _____
   ( x y ) = x' + y'
   
Switching expressions, they act as functions, which means they take some input and map to some output

Example: f(a,b,c) = a + bc 

If we have 3 variables than we will have pow(2,3) = 8 inputs
--------------------------------------------
Input | f | f'| MINTERM       | MAXTERM
      |   |   | when(f = 1)   | when(f = 0)
------|---|---|---------------|-------------
0 0 0 | 0 | 1 |               | (a+b+c)
0 0 1 | 0 | 1 |               | (a+b+c')
0 1 0 | 0 | 1 |               | (a+b'+c)
0 1 1 | 1 | 0 | a'bc          | 
1 0 0 | 1 | 0 | ab'c'         |
1 0 1 | 1 | 0 | ab'c          |
1 1 0 | 1 | 0 | abc'          |
1 1 1 | 1 | 0 | abc           |

Example 2: The minterms of f(a,b) are { a'b' , a'b ,  ab' , ab } 
* Note: canonical sum of products is sum of all the minterms for which the function has the value 1
f(a,b) = a'b' + a'b + ab' + ab = 1

Functions can be represented in different ways
1. Canonical representation : 
   a) Canonical sum of products is called MINTERM ( it says when the function is going to be 1 )
      f = Σ(3,4,5,6,7) => (011) + (100) + (101) + (110) + (111)
      f = a'bc + ab'c' + ab'c + abc' + abc
   b) Canonical product of sums is called MAXTERM ( it says when the function is going to be 0 )
      f = π(0,1,2) => (0+0+0)(0+0+1)(0+1+0)
      f = (a+b+c)(a+b+c')(a+b'+c)
      

AND : a.b
OR: a+b
NOT
       ___
NAND : a.b = a ↑ b
       ___
NOR  : a+b = a ↓ b

XOR : Modulo 2 sum : a ⊕ b
   
