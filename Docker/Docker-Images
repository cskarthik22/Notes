# To check to the status of docker service
 systemctl status docker
 
# Place where actual docker related files go...
cd /var/lib/docker
# Inorder to manage it , user has to be part of this docker group ( default group )

=============COMMANDS================================================================
 man docker-network-bridge  -- help page multiple commands with '-'
 docker images
 docker ps
 docker ps -a
 docker inspect <<IMAGENAME>>
 docker run -it <<IMAGENAME>>  ## i - interactive , t - terminal
 docker run -itd <<IMAGENAME>> ## d -demeon run at background.
 docker run -itd --name <<ContainerLogicalName>> <<IMAGENAME>>  ##
 docker run -it <<IMAGENAME>> /bin/bash  ## you can login to container in bash mode
 docker run -itd --name <<ContainerLogicalName>> <<IMAGENAME>> -p <<hostport>>:<<containerport>>
 docker run -it --name <<ContainerLogicalName>> <<IMAGENAME>> -v /usr/containerVolumedir2
 docker run -it --name <<ContainerLogicalName>> <<IMAGENAME>> -v /apps/opt/hostVoldir:/usr/containerVolumedir
 docker rename <<ContainerName>> <<NEW-ContainerName>>
 
 docker run .... istantiates a new container from image
 docker start <<CONTAINERNAME>>
 docker stop <<CONTAINERNAME>>
 docker exec <<CONTAINERNAME>> <<LinuxCommand>>
 example:
 docker exec <<CONTAINERNAME>> /bin/ps aux | grep bash
 docker top <<CONTAINERNAME>>
 
 docker kill $(docker ps -q)
 docker rm $(docker ps -aq)
 
 docker events --since '1h'
 
 To create a new bash process with in the container without stopping
 docker exec -it <<CONTAINERNAME>> /bin/bash 
 
 docker network ls
 docker network ls --no-trunc
 docker network inspect bridge
 docker network inspect host
 docker stats <<CONTAINERNAME>>
  
 # create a new network bridge
 docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 mybridge01
=====================================================================================
 # create a custom container
 docker run -it <<IMAGENAME>> /bin/bash
 cd /opt
 mkdir softwares
 cd /softwares
 apt-get update
 
 
 Docker doesnt support static Ip's for containers, we need to use dockerswan or kubernetes
 
 
###########################################################Dockerfile############################################################### 
FROM centos:latest 
MAINTAINER dockerusr@study.com 
# RUN statements execute at the time of docker build and will be part of image ( e.g. docker build -t <<TAG NAME>> )
# COMMAND statements execute at the time of container initialization and is not part of image ( e.g: docker run <<IMAGENAME>> ). 
  this will if you run with /bin/bash option 
RUN useradd -ms /bin/bash user RUN echo "EXPORT 192.168.0.0/24" » /etc/exports.list 
RUN yum update -y RUN yum install -y net-tools wget 
# below statement accepts the license silently without prompt.
RUN cd && wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=httpso3AUF962Fwww.oracle.co m9s2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u60-b27/jre -8u60-linux-x64.rpm" 
RUN yum localinstall -y -/jre-8u60-linux-x64.rpm USER user RUN cd && echo "export JAVA_HOME=/usr/java/jdk1.8.0/jre" » /home/user/.bashrc 

# To set environmental variable at system level use below 
ENV JAVA_BIN /usr/java/jdk1.8.0_73/bin

CMD "echo" "This is custom container message"




